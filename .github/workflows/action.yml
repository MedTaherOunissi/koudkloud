name: PENTEST Pipeline - DevSecOps

on:

  push:
    branches: main
  workflow_dispatch:
  
    inputs:
      target_environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      scan_intensity:
        description: 'Scan Intensity'
        required: true
        default: 'medium'
        type: choice
        options:
        - light
        - medium
        - intensive
      target_url:
        description: 'Target URL (optional override)'
        required: false
        default: 'http://www.vulnweb.com/'

permissions:
  contents: read
  issues: write
  security-events: write

env:
  TARGET_URL: ${{ github.event.inputs.target_url || 'http://www.vulnweb.com/' }}
  SCAN_INTENSITY: ${{ github.event.inputs.scan_intensity || 'medium' }}
  ENVIRONMENT: ${{ github.event.inputs.target_environment || 'staging' }}

jobs:
  pre-scan-validation:
    name: üîç Pre-Scan Validation
    runs-on: ubuntu-latest
    outputs:
      target-accessible: ${{ steps.connectivity.outputs.accessible }}
    steps:
      - name: üåê Check Target Accessibility
        id: connectivity
        run: |
          echo "Testing connectivity to ${{ env.TARGET_URL }}"
          
          # Basic connectivity test
          if curl -f -s -I "${{ env.TARGET_URL }}" > /dev/null; then
            echo "‚úÖ Target is accessible"
            echo "accessible=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Target is not accessible"
            echo "accessible=false" >> $GITHUB_OUTPUT
          fi
      
      - name: üìã Environment Check
        run: |
          echo "üéØ Target URL: ${{ env.TARGET_URL }}"
          echo "üîç Scan Intensity: ${{ env.SCAN_INTENSITY }}"
          echo "üèóÔ∏è Environment: ${{ env.ENVIRONMENT }}"
          
          # Prevent accidental production scans
          if [[ "${{ env.ENVIRONMENT }}" == "production" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "‚ùå Production scans only allowed via manual dispatch"
            exit 1
          fi

  owasp-zap-scan:
    name: üï∑Ô∏è OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    needs: pre-scan-validation
    if: needs.pre-scan-validation.outputs.target-accessible == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: üï∑Ô∏è OWASP ZAP Baseline Scan
        if: env.SCAN_INTENSITY == 'light'
        uses: zaproxy/action-baseline@v0.10.0
        continue-on-error: true
        with:
          target: ${{ env.TARGET_URL }}
          fail_action: false
          cmd_options: '-J zap-baseline.json -r zap-baseline.html -w zap-baseline.md'
      
      - name: üï∑Ô∏è OWASP ZAP Full Scan
        if: env.SCAN_INTENSITY == 'medium' || env.SCAN_INTENSITY == 'intensive'
        uses: zaproxy/action-full-scan@v0.8.0
        continue-on-error: true
        with:
          target: ${{ env.TARGET_URL }}
          fail_action: false
          cmd_options: '-J zap-full.json -r zap-full.html -w zap-full.md'
      
      - name: üï∑Ô∏è OWASP ZAP API Scan
        if: env.SCAN_INTENSITY == 'intensive'
        run: |
          docker run -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-stable zap-api-scan.py \
            -t ${{ env.TARGET_URL }}/api/swagger.json \
            -f openapi \
            -J zap-api.json \
            -r zap-api.html || true
      
      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-reports
          path: |
            zap-*.json
            zap-*.html
            zap-*.md
