name: PENTEST Pipeline - DevSecOps

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      scan_intensity:
        description: 'Scan Intensity'
        required: true
        default: 'medium'
        type: choice
        options:
          - light
          - medium
          - intensive
      target_url:
        description: 'Target URL (optional override)'
        required: false
        default: 'http://www.vulnweb.com/'
  schedule:
    - cron: "0 2 * * 1" # Every Monday at 2:00 AM UTC

permissions:
  contents: read
  issues: write
  security-events: write

env:
  TARGET_URL: ${{ github.event.inputs.target_url || 'http://www.vulnweb.com/' }}
  SCAN_INTENSITY: ${{ github.event.inputs.scan_intensity || 'medium' }}
  ENVIRONMENT: ${{ github.event.inputs.target_environment || 'staging' }}

jobs:
  pre-scan-validation:
    name: 🔍 Pre-Scan Validation
    runs-on: ubuntu-latest
    outputs:
      target-accessible: ${{ steps.connectivity.outputs.accessible }}
    steps:
      - name: 🌐 Check Target Accessibility
        id: connectivity
        run: |
          echo "Testing connectivity to ${{ env.TARGET_URL }}"
          if curl -f -s -I "${{ env.TARGET_URL }}" > /dev/null; then
            echo "✅ Target is accessible"
            echo "accessible=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Target is not accessible"
            echo "accessible=false" >> $GITHUB_OUTPUT
          fi
      - name: 📋 Environment Check
        run: |
          echo "🎯 Target URL: ${{ env.TARGET_URL }}"
          echo "🔍 Scan Intensity: ${{ env.SCAN_INTENSITY }}"
          echo "🏗️ Environment: ${{ env.ENVIRONMENT }}"
          if [[ "${{ env.ENVIRONMENT }}" == "production" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "❌ Production scans only allowed via manual dispatch"
            exit 1
          fi

  owasp-zap-scan:
    name: 🕷️ OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    needs: pre-scan-validation
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP ZAP Baseline Scan
        if: env.SCAN_INTENSITY == 'light'
        uses: zaproxy/action-baseline@v0.10.0
        continue-on-error: true
        with:
          target: ${{ env.TARGET_URL }}
          fail_action: false
          cmd_options: '-J report_json.json -r report_html.html -w report_md.md'
      - name: Run OWASP ZAP Full Scan
        if: env.SCAN_INTENSITY == 'medium' || env.SCAN_INTENSITY == 'intensive'
        uses: zaproxy/action-full-scan@v0.8.0
        continue-on-error: true
        with:
          target: ${{ env.TARGET_URL }}
          fail_action: false
          cmd_options: '-J report_json.json -r report_html.html -w report_md.md'
      - name: Upload ZAP Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            report_html.html
            report_json.json
            report_md.md

  nmap-scan:
    name: 🗺️ Network Discovery - Nmap
    runs-on: ubuntu-latest
    needs: pre-scan-validation
    steps:
      - name: 🔧 Install Nmap
        run: sudo apt-get update && sudo apt-get install -y nmap
      - name: 🗺️ Nmap Scan
        run: |
          TARGET_HOST=$(echo ${{ env.TARGET_URL }} | sed 's|https\?://||' | sed 's|/.*||')
          if [[ "${{ env.SCAN_INTENSITY }}" == "light" ]]; then
            sudo nmap -sS -O -sV --top-ports 1000 -oX nmap-basic.xml -oN nmap-basic.txt $TARGET_HOST
          elif [[ "${{ env.SCAN_INTENSITY }}" == "medium" ]]; then
            sudo nmap -sS -sU -O -sV -sC --script=vuln,safe,discovery -p- -oX nmap-comprehensive.xml -oN nmap-comprehensive.txt $TARGET_HOST
          else
            sudo nmap -sS -sU -O -sV -sC -A --script=vuln,malware,exploit,auth,brute --script-timeout=60s -p- -T4 -oX nmap-intensive.xml -oN nmap-intensive.txt $TARGET_HOST
          fi
      - name: Upload Nmap Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nmap-reports
          path: nmap-*.xml

  sqlmap-scan:
    name: 💉 SQL Injection Testing - SQLMap
    runs-on: ubuntu-latest
    needs: pre-scan-validation
    if: needs.pre-scan-validation.outputs.target-accessible == 'true'
    steps:
      - name: 🔧 Install SQLMap
        run: sudo apt-get update && sudo apt-get install -y sqlmap
      - name: 💉 SQLMap Scan
        run: |
          sqlmap -u "${{ env.TARGET_URL }}" --crawl=3 --batch --random-agent --level=3 --risk=2 --output-dir=sqlmap-results || true
      - name: Upload SQLMap Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sqlmap-reports
          path: sqlmap-results/

  arachni-scan:
    name: 🕸️ Arachni Web Scanner
    runs-on: ubuntu-latest
    needs: pre-scan-validation
    steps:
      - name: 🔧 Install Arachni
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xzf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          echo "$(pwd)/arachni-1.6.1.3-0.6.1.1/bin" >> $GITHUB_PATH
      - name: 🕸️ Arachni Scan
        run: |
          arachni ${{ env.TARGET_URL }} --report-save-path=arachni-report.afr --output-verbose --scope-page-limit=50
      - name: 📊 Generate Reports
        run: |
          arachni_reporter arachni-report.afr --reporter=html:outfile=arachni-report.html
          arachni_reporter arachni-report.afr --reporter=json:outfile=arachni-report.json
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: arachni-reports
          path: |
            arachni-report.html
            arachni-report.json
            arachni-report.afr

  w3af-scan:
    name: 🌐 w3af Web Security Scanner
    runs-on: ubuntu-latest
    needs: pre-scan-validation
    steps:
      - name: 🔧 Install w3af
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip git
          git clone https://github.com/andresriancho/w3af.git
          cd w3af && pip3 install -r requirements.txt || true
      - name: 🌐 Run w3af Scan
        run: |
          cd w3af
          cat > pentest_script.w3af <<EOF
          plugins
          output console,text_file
          output config text_file
          set output_file w3af-output.txt
          back
          crawl web_spider
          audit sqli,xss,csrf
          target
          set target ${{ env.TARGET_URL }}
          back
          start
          exit
          EOF
          python3 w3af_console -s pentest_script.w3af || true
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: w3af-reports
          path: w3af/w3af-output.txt

  ssl-tls-scan:
    name: 🔒 SSL/TLS Security Scan
    runs-on: ubuntu-latest
    needs: pre-scan-validation
    steps:
      - name: 🔧 Install SSLyze
        run: pip3 install sslyze
      - name: 🔒 Run SSLyze
        run: |
          TARGET_HOST=$(echo ${{ env.TARGET_URL }} | sed 's|https\?://||' | sed 's|/.*||')
          sslyze --regular $TARGET_HOST:443 --json_out sslyze-report.json || true
      - name: 🔧 Install testssl.sh
        run: |
          git clone https://github.com/drwetter/testssl.sh.git
          chmod +x testssl.sh/testssl.sh
      - name: 🔒 Run testssl.sh
        run: |
          TARGET_HOST=$(echo ${{ env.TARGET_URL }} | sed 's|https\?://||' | sed 's|/.*||')
          ./testssl.sh/testssl.sh --jsonfile testssl-report.json --htmlfile testssl-report.html $TARGET_HOST:443 || true
      - name: Upload SSL Reports
        uses: actions/upload-artifact@v4
        with:
          name: ssl-reports
          path: |
            sslyze-report.json
            testssl-report.html
            testssl-report.json

  notify-slack:
    name: 📣 Notify Slack
    runs-on: ubuntu-latest
    needs:
      - pre-scan-validation
      - owasp-zap-scan
      - nmap-scan
      - sqlmap-scan
      - arachni-scan
      - w3af-scan
      - ssl-tls-scan
    if: always()
    steps:
      - name: 📩 Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: "security-team"
          SLACK_USERNAME: "Pentest Bot"
          SLACK_TITLE: "Pentest Pipeline Results"
          SLACK_MESSAGE: "Pentest pipeline has completed. Please review the uploaded reports."
