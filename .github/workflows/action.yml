name: PENTEST Pipeline - DevSecOps

on:

  push:
    branches: main
  workflow_dispatch:
  
    inputs:
      target_environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      scan_intensity:
        description: 'Scan Intensity'
        required: true
        default: 'medium'
        type: choice
        options:
        - light
        - medium
        - intensive
      target_url:
        description: 'Target URL (optional override)'
        required: false
        default: 'http://www.vulnweb.com/'

permissions:
  contents: read
  issues: write
  security-events: write

env:
  TARGET_URL: ${{ github.event.inputs.target_url || 'http://www.vulnweb.com/' }}
  SCAN_INTENSITY: ${{ github.event.inputs.scan_intensity || 'medium' }}
  ENVIRONMENT: ${{ github.event.inputs.target_environment || 'staging' }}

jobs:
  pre-scan-validation:
    name: üîç Pre-Scan Validation
    runs-on: ubuntu-latest
    outputs:
      target-accessible: ${{ steps.connectivity.outputs.accessible }}
    steps:
      - name: üåê Check Target Accessibility
        id: connectivity
        run: |
          echo "Testing connectivity to ${{ env.TARGET_URL }}"
          
          # Basic connectivity test
          if curl -f -s -I "${{ env.TARGET_URL }}" > /dev/null; then
            echo "‚úÖ Target is accessible"
            echo "accessible=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Target is not accessible"
            echo "accessible=false" >> $GITHUB_OUTPUT
          fi
      
      - name: üìã Environment Check
        run: |
          echo "üéØ Target URL: ${{ env.TARGET_URL }}"
          echo "üîç Scan Intensity: ${{ env.SCAN_INTENSITY }}"
          echo "üèóÔ∏è Environment: ${{ env.ENVIRONMENT }}"
          
          # Prevent accidental production scans
          if [[ "${{ env.ENVIRONMENT }}" == "production" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "‚ùå Production scans only allowed via manual dispatch"
            exit 1
          fi

  owasp-zap-scan:
    name: üï∑Ô∏è OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    permissions:
     actions: write
     contents: read
     issues: write

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run OWASP ZAP Baseline Scan
      if: env.SCAN_INTENSITY == 'light'
      uses: zaproxy/action-baseline@v0.10.0
      continue-on-error: true
      with:
        target: ${{ env.TARGET_URL }}
        fail_action: false
        cmd_options: '-J report_json.json -r report_html.html -w report_md.md'

    - name: Run OWASP ZAP Full Scan
      if: env.SCAN_INTENSITY == 'medium' || env.SCAN_INTENSITY == 'intensive'
      uses: zaproxy/action-full-scan@v0.8.0
      continue-on-error: true
      with:
        target: ${{ env.TARGET_URL }}
        fail_action: false
        cmd_options: '-J report_json.json -r report_html.html -w report_md.md'

    - name: Run OWASP ZAP API Scan
      if: env.SCAN_INTENSITY == 'intensive'
      run: |
        docker run -v $(pwd):/zap/wrk/:rw \
          -t owasp/zap2docker-stable zap-api-scan.py \
          -t ${{ env.TARGET_URL }}/api/swagger.json \
          -f openapi \
          -J zap-api.json \
          -r zap-api.html || true

    - name: List Generated Files
      if: always()
      run: ls -lah

    - name: Show Report Contents
      if: always()
      run: |
        echo "=== report_html.html ==="
        cat report_html.html || echo "report_html.html not found"
        echo "=== report_json.json ==="
        cat report_json.json || echo "report_json.json not found"
        echo "=== report_md.md ==="
        cat report_md.md || echo "report_md.md not found"

    - name: Upload ZAP Reports
      if: always()
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: zap_reports
        path: |
          report_html.html
          report_json.json
          report_md.md
          zap-api.json
          zap-api.html
        retention-days: 1
  nuclei-scan:
    name: üéØ Nuclei Vulnerability Scanner
    runs-on: ubuntu-latest

    env:
      TARGET_URL: http://www.vulnweb.com/
      SCAN_INTENSITY: medium  # Change to light, medium or intensive

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install nuclei v3.4.7
        run: |
          curl -L -o nuclei.zip https://github.com/projectdiscovery/nuclei/releases/download/v3.4.7/nuclei_3.4.7_linux_amd64.zip
          unzip nuclei.zip
          chmod +x nuclei
          sudo mv nuclei /usr/local/bin/

      - name: Update nuclei templates
        run: nuclei -update-templates

      - name: Basic Nuclei Scan
        if: env.SCAN_INTENSITY == 'light'
        run: |
          nuclei -u ${{ env.TARGET_URL }} \
            -severity critical,high \
            -o nuclei-basic.json

      - name: Comprehensive Nuclei Scan
        if: env.SCAN_INTENSITY == 'medium'
        run: |
          nuclei -u ${{ env.TARGET_URL }} \
            -severity critical,high,medium \
            -tags cve,owasp,misc,config \
            -o nuclei-comprehensive.json

      - name: Intensive Nuclei Scan
        if: env.SCAN_INTENSITY == 'intensive'
        run: |
          nuclei -u ${{ env.TARGET_URL }} \
            -severity critical,high,medium,low \
            -tags cve,owasp,misc,config,network,dns \
            -rate-limit 10 \
            -bulk-size 25 \
            -o nuclei-intensive.json

      - name: Upload Nuclei Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nuclei-reports
          path: nuclei-*.json